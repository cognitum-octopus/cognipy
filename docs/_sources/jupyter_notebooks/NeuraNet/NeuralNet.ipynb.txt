{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The basic, ontology based ANN configurator with TensorFlow\n",
    "This is the example of ANN ontology which support TensorFlow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cognipy.ontology import Ontology,CQL\n",
    "from cognipy.edit import CnlEditBox, CnlQueryForConcept"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need some functionalites that will allow us to manipulate/print the dataframes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we are ready to load the core ontology. It just contains the basic ANN concepts. We will define the net a little bit later."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "/* jshint browser: true */\n",
       "\n",
       "(function () {\n",
       "\n",
       "// We'll copy the properties below into the mirror div.\n",
       "// Note that some browsers, such as Firefox, do not concatenate properties\n",
       "// into their shorthand (e.g. padding-top, padding-bottom etc. -> padding),\n",
       "// so we have to list every single property explicitly.\n",
       "var properties = [\n",
       "  'direction',  // RTL support\n",
       "  'boxSizing',\n",
       "  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n",
       "  'height',\n",
       "  'overflowX',\n",
       "  'overflowY',  // copy the scrollbar for IE\n",
       "\n",
       "  'borderTopWidth',\n",
       "  'borderRightWidth',\n",
       "  'borderBottomWidth',\n",
       "  'borderLeftWidth',\n",
       "  'borderStyle',\n",
       "\n",
       "  'paddingTop',\n",
       "  'paddingRight',\n",
       "  'paddingBottom',\n",
       "  'paddingLeft',\n",
       "\n",
       "  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n",
       "  'fontStyle',\n",
       "  'fontVariant',\n",
       "  'fontWeight',\n",
       "  'fontStretch',\n",
       "  'fontSize',\n",
       "  'fontSizeAdjust',\n",
       "  'lineHeight',\n",
       "  'fontFamily',\n",
       "\n",
       "  'textAlign',\n",
       "  'textTransform',\n",
       "  'textIndent',\n",
       "  'textDecoration',  // might not make a difference, but better be safe\n",
       "\n",
       "  'letterSpacing',\n",
       "  'wordSpacing',\n",
       "\n",
       "  'tabSize',\n",
       "  'MozTabSize'\n",
       "\n",
       "];\n",
       "\n",
       "var isBrowser = (typeof window !== 'undefined');\n",
       "var isFirefox = (isBrowser && window.mozInnerScreenX != null);\n",
       "\n",
       "function getCaretCoordinates(element, position, options) {\n",
       "  if (!isBrowser) {\n",
       "    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n",
       "  }\n",
       "\n",
       "  var debug = options && options.debug || false;\n",
       "  if (debug) {\n",
       "    var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n",
       "    if (el) el.parentNode.removeChild(el);\n",
       "  }\n",
       "\n",
       "  // The mirror div will replicate the textarea's style\n",
       "  var div = document.createElement('div');\n",
       "  div.id = 'input-textarea-caret-position-mirror-div';\n",
       "  document.body.appendChild(div);\n",
       "\n",
       "  var style = div.style;\n",
       "  var computed = window.getComputedStyle ? window.getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9\n",
       "  var isInput = element.nodeName === 'INPUT';\n",
       "\n",
       "  // Default textarea styles\n",
       "  style.whiteSpace = 'pre-wrap';\n",
       "  if (!isInput)\n",
       "    style.wordWrap = 'break-word';  // only for textarea-s\n",
       "\n",
       "  // Position off-screen\n",
       "  style.position = 'absolute';  // required to return coordinates properly\n",
       "  if (!debug)\n",
       "    style.visibility = 'hidden';  // not 'display: none' because we want rendering\n",
       "\n",
       "  // Transfer the element's properties to the div\n",
       "  properties.forEach(function (prop) {\n",
       "    if (isInput && prop === 'lineHeight') {\n",
       "      // Special case for <input>s because text is rendered centered and line height may be != height\n",
       "      if (computed.boxSizing === \"border-box\") {\n",
       "        var height = parseInt(computed.height);\n",
       "        var outerHeight =\n",
       "          parseInt(computed.paddingTop) +\n",
       "          parseInt(computed.paddingBottom) +\n",
       "          parseInt(computed.borderTopWidth) +\n",
       "          parseInt(computed.borderBottomWidth);\n",
       "        var targetHeight = outerHeight + parseInt(computed.lineHeight);\n",
       "        if (height > targetHeight) {\n",
       "          style.lineHeight = height - outerHeight + \"px\";\n",
       "        } else if (height === targetHeight) {\n",
       "          style.lineHeight = computed.lineHeight;\n",
       "        } else {\n",
       "          style.lineHeight = 0;\n",
       "        }\n",
       "      } else {\n",
       "        style.lineHeight = computed.height;\n",
       "      }\n",
       "    } else {\n",
       "      style[prop] = computed[prop];\n",
       "    }\n",
       "  });\n",
       "\n",
       "  if (isFirefox) {\n",
       "    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n",
       "    if (element.scrollHeight > parseInt(computed.height))\n",
       "      style.overflowY = 'scroll';\n",
       "  } else {\n",
       "    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n",
       "  }\n",
       "\n",
       "  div.textContent = element.value.substring(0, position);\n",
       "  // The second special handling for input type=\"text\" vs textarea:\n",
       "  // spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n",
       "  if (isInput)\n",
       "    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n",
       "\n",
       "  var span = document.createElement('span');\n",
       "  // Wrapping must be replicated *exactly*, including when a long word gets\n",
       "  // onto the next line, with whitespace at the end of the line before (#7).\n",
       "  // The  *only* reliable way to do that is to copy the *entire* rest of the\n",
       "  // textarea's content into the <span> created at the caret position.\n",
       "  // For inputs, just '.' would be enough, but no need to bother.\n",
       "  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\n",
       "  div.appendChild(span);\n",
       "\n",
       "  var coordinates = {\n",
       "    top: span.offsetTop + parseInt(computed['borderTopWidth']),\n",
       "    left: span.offsetLeft + parseInt(computed['borderLeftWidth']),\n",
       "    height: parseInt(computed['lineHeight'])\n",
       "  };\n",
       "\n",
       "  if (debug) {\n",
       "    span.style.backgroundColor = '#aaa';\n",
       "  } else {\n",
       "    document.body.removeChild(div);\n",
       "  }\n",
       "\n",
       "  return coordinates;\n",
       "}\n",
       "\n",
       "if (typeof module != 'undefined' && typeof module.exports != 'undefined') {\n",
       "  module.exports = getCaretCoordinates;\n",
       "} else if(isBrowser) {\n",
       "  window.getCaretCoordinates = getCaretCoordinates;\n",
       "}\n",
       "\n",
       "}());\n",
       "\n",
       "require.undef('ontoedit');\n",
       "\n",
       "define('ontoedit', [\"@jupyter-widgets/base\"], function(widgets) {\n",
       "\n",
       "    var OntoeditModel = widgets.TextareaModel.extend({\n",
       "\n",
       "        defaults: $.extend(widgets.TextareaModel.prototype.defaults(), {\n",
       "            _model_name: \"OntoeditModel\",\n",
       "            _view_name: \"OntoeditView\",\n",
       "            _model_module: \"ontoedit\",\n",
       "            _view_module: \"ontoedit\",\n",
       "            rows: null,\n",
       "            continuous_update: true,\n",
       "            cursor: 0,\n",
       "            dot:0,\n",
       "            hints:'',\n",
       "            hintsX:0,\n",
       "            hintT:''\n",
       "        })\n",
       "    });\n",
       "\n",
       "    var OntoeditView = widgets.TextareaView.extend({\n",
       "\n",
       "        render: function() {\n",
       "            OntoeditView.__super__.render.apply(this, arguments);\n",
       "            this.model.on('change:hints', this.hints_changed, this);\n",
       "            this.model.on('change:hintsX', this.hintsX_changed, this);\n",
       "\n",
       "            var model = this.model;\n",
       "            var that = this;\n",
       "\n",
       "            var last_position = 0;\n",
       "\n",
       "            function cursor_changed(element) {\n",
       "                var new_position = getCursorPosition(element);\n",
       "                if (new_position !== last_position) {\n",
       "                    last_position = new_position;\n",
       "                    return true;\n",
       "                }\n",
       "                return false;\n",
       "            }\n",
       "\n",
       "            function getCursorPosition(element) {\n",
       "                var el = $(element).get(0);\n",
       "                var pos = 0;\n",
       "                if ('selectionStart' in el) {\n",
       "                    pos = el.selectionStart;\n",
       "                } else if ('selection' in document) {\n",
       "                    el.focus();\n",
       "                    var Sel = document.selection.createRange();\n",
       "                    var SelLength = document.selection.createRange().text.length;\n",
       "                    Sel.moveStart('character', -el.value.length);\n",
       "                    pos = Sel.text.length - SelLength;\n",
       "                }\n",
       "                return pos;\n",
       "            }\n",
       "\n",
       "            var oldVal = \"\";\n",
       "\n",
       "            this.dd=$('<div style=\"-moz-appearance: textfield-multiline;-webkit-appearance: textarea;font: medium -moz-fixed; font: -webkit-small-control; position: absolute;z-index: 1; background-color:navy;color:white;box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.4); \"/>')\n",
       "\n",
       "            $(this.el).bind(\"click keyup focus\",function(e){\n",
       "                if (that.dd.get(0).style.visibility!=\"visible\")\n",
       "                    return;\n",
       "                \n",
       "                var ele=$($(that.el).children(\"textarea\")[0])\n",
       "\n",
       "                if(cursor_changed(ele)){\n",
       "                   var  cursor = getCursorPosition(ele);\n",
       "//                    console.log(cursor);\n",
       "//                    console.log('(top, left, height) = (%s, %s, %s)', caret.top, caret.left, caret.height);\n",
       "                    model.set('cursor',cursor);\n",
       "//                    console.log(cursor)\n",
       "                    that.touch();\n",
       "                }\n",
       "            });\n",
       "\n",
       "            $($(this.el).children(\"textarea\")[0]).bind(\"blur\",function(e){\n",
       "//                console.log(\"blur\")\n",
       "                  model.set('dot',model.get('dot')+1);\n",
       "                  that.touch();\n",
       "                that.dd.get(0).style.visibility=\"hidden\";\n",
       "            });\n",
       "\n",
       "            $($(this.el).children(\"textarea\")[0]).bind(\"keydown\",function(e){\n",
       "                  if (String.fromCharCode(event.which)=='\\t')\n",
       "                  {\n",
       "                        if (that.dd.get(0).style.visibility!=\"visible\")\n",
       "                        {\n",
       "                            var ele=$($(that.el).children(\"textarea\")[0])\n",
       "\n",
       "                            if(cursor_changed(ele)){\n",
       "                               var  cursor = getCursorPosition(ele);\n",
       "            //                    console.log(cursor);\n",
       "            //                    console.log('(top, left, height) = (%s, %s, %s)', caret.top, caret.left, caret.height);\n",
       "                                model.set('cursor',cursor);\n",
       "            //                    console.log(cursor)\n",
       "                                that.touch();\n",
       "                                that.dd.get(0).style.visibility=\"visible\";\n",
       "                            }\n",
       "                        }\n",
       "//                      console.log(model.get('hintT'));\n",
       "                      var target=$($(that.el).children(\"textarea\")[0])\n",
       "                      var curpos = getCursorPosition(target)\n",
       "                      var off=curpos-model.get('hintsX')\n",
       "                      var data = model.get('hintT').slice(off)\n",
       "//                      console.log(off)\n",
       "\n",
       "                      if (target.setRangeText) {\n",
       "                         //if setRangeText function is supported by current browser\n",
       "                         target.setRangeText(data)\n",
       "                      } else {\n",
       "                        target.focus()\n",
       "                        document.execCommand('insertText', false /*no UI*/, data);\n",
       "                      }\n",
       "                      e.preventDefault();\n",
       "                      return;\n",
       "                  }\n",
       "                  else if (event.key=='.')\n",
       "                  {\n",
       "                      model.set('dot',model.get('dot')+1);\n",
       "                      that.touch();\n",
       "                  }\n",
       "                  else if(event.key== \"Escape\")\n",
       "                  {\n",
       "                    that.dd.get(0).style.visibility=\"hidden\";\n",
       "                  }\n",
       "            });\n",
       "\n",
       "            // this.el represents the widget's DOM\n",
       "            $(this.el)\n",
       "            .append(this.dd)\n",
       "        },\n",
       "\n",
       "        hints_changed: function() {\n",
       "            var that = this;\n",
       "            var model = this.model;\n",
       "            that.dd.get(0).innerHTML=model.get('hints')\n",
       "//            console.log(model.get('hints'))\n",
       "        },\n",
       "        hintsX_changed: function() {\n",
       "            var that = this;\n",
       "            var model = this.model;\n",
       "            var ele=$($(that.el).children(\"textarea\")[0]);\n",
       "            element=ele.get(0);\n",
       "            var caret = getCaretCoordinates(ele.get(0), model.get('hintsX'));\n",
       "            that.dd.get(0).style.top = element.offsetTop - element.scrollTop + caret.top+ caret.height-5 + 'px';\n",
       "            that.dd.get(0).style.left = element.offsetLeft - element.scrollLeft + caret.left + 'px';\n",
       "//            that.dd.get(0).style.width = '20%';\n",
       "//            that.dd.get(0).style.height = '50%';\n",
       "            that.dd.get(0).style.fontFamily=element.style.fontFamily;\n",
       "            that.dd.get(0).style.fontSize=element.style.fontSize;\n",
       "//                        console.log(model.get('hintsX'))\n",
       "        },\n",
       "    });\n",
       "\n",
       "    return {\n",
       "        OntoeditModel : OntoeditModel,\n",
       "        OntoeditView : OntoeditView\n",
       "    };\n",
       "});\n"
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "Welcome to CogniPy"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "60257b1247204b0f837150b8f2fe30dd",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "VBox(children=(Output(), OntoeditWidget(layout=Layout(height='100%', width='90%'), value='\\nEvery basic-neural…"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ed2=CnlEditBox('./ann2.encnl')\n",
    "ed2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "onto=Ontology(\"cnl/file\",\"./ann2.encnl\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We define now the internat structure of the network with few simple sentences:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "netName=\"Net-1\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "onto.insert_cnl(netName+\" is a basic-neural-net that has-part L-In. \\\n",
    "L-In is an basic-neural-net-input-layer that connects-to Ann-1-F-1 and has-width equal-to 12288.\\\n",
    "Ann-1-F-1 is a multilayer-neural-net-fragment that connects-to Ann-1-F-2 and has-shape equal-to '25' and has-activation equal-to 'RELU'.\\\n",
    "Ann-1-F-2 is a multilayer-neural-net-fragment that connects-to L-Out and has-shape equal-to '12' and has-activation equal-to 'RELU'.\\\n",
    "L-Out is an basic-neural-net-output-layer that has-number-of-classes equal-to 6.\\\n",
    "\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets setup the initializer and optimiser for our ANN."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "onto.insert_cnl(netName+\" has-part Initializer-1. Initializer-1 is an initializer that has-character equal-to 'Xavier'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "onto.insert_cnl(netName+\" has-part Optimizer-1. Optimizer-1 is an optimizer that has-character equal-to 'ADAM'.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Optimizer-1',\n",
       " 'Initializer-1',\n",
       " 'L-Out',\n",
       " 'Ann-1-F-2',\n",
       " 'Ann-1-F-1',\n",
       " 'L-In',\n",
       " 'Net-1']"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parts = onto.instances_of(\"a thing\")\n",
    "parts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "inp   = onto.select_instances_of(\"a neural-net-input-layer that is-part-of \"+netName)\n",
    "outp  = onto.select_instances_of(\"a neural-net-output-layer that is-part-of \"+netName)\n",
    "frags = onto.select_instances_of(\"a neural-net-fragment that is-part-of \"+netName)\n",
    "init  = onto.select_instances_of(\"a initializer that is-part-of \"+netName)\n",
    "opti  = onto.select_instances_of(\"a optimizer that is-part-of \"+netName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12288\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "x_n=inp['has-width'][0]\n",
    "y_n=outp['has-number-of-classes'][0]\n",
    "print(x_n)\n",
    "print(y_n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Instance</th>\n",
       "      <th>connects-to</th>\n",
       "      <th>is-part-of</th>\n",
       "      <th>has-activation</th>\n",
       "      <th>has-shape</th>\n",
       "      <th>has-index</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Ann-1-F-1</td>\n",
       "      <td>Ann-1-F-2</td>\n",
       "      <td>Net-1</td>\n",
       "      <td>RELU</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Ann-1-F-2</td>\n",
       "      <td>L-Out</td>\n",
       "      <td>Net-1</td>\n",
       "      <td>RELU</td>\n",
       "      <td>12</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Instance connects-to is-part-of has-activation has-shape  has-index\n",
       "1  Ann-1-F-1   Ann-1-F-2      Net-1           RELU        25          1\n",
       "0  Ann-1-F-2       L-Out      Net-1           RELU        12          2"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "frags=frags.sort_values('has-index')\n",
    "frags"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[12]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "shape=[int(x) for x in str.split(frags['has-shape'].values[1],\":\")]\n",
    "shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'RELU'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "activations = frags['has-activation'].values[1]\n",
    "activations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Instance</th>\n",
       "      <th>is-part-of</th>\n",
       "      <th>has-character</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Initializer-1</td>\n",
       "      <td>Net-1</td>\n",
       "      <td>Xavier</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Instance is-part-of has-character\n",
       "0  Initializer-1      Net-1        Xavier"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "init"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Instance</th>\n",
       "      <th>is-part-of</th>\n",
       "      <th>has-character</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Optimizer-1</td>\n",
       "      <td>Net-1</td>\n",
       "      <td>ADAM</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Instance is-part-of has-character\n",
       "0  Optimizer-1      Net-1          ADAM"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "opti"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# TEST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting tensorflow\n",
      "  Downloading tensorflow-2.3.1-cp37-cp37m-win_amd64.whl (342.5 MB)\n",
      "Requirement already satisfied: termcolor>=1.1.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (1.1.0)\n",
      "Requirement already satisfied: h5py<2.11.0,>=2.10.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (2.10.0)\n",
      "Requirement already satisfied: tensorboard<3,>=2.3.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (2.3.0)\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (3.3.0)\n",
      "Requirement already satisfied: wrapt>=1.11.1 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (1.12.1)\n",
      "Requirement already satisfied: six>=1.12.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (1.15.0)\n",
      "Requirement already satisfied: absl-py>=0.7.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (0.7.0)\n",
      "Requirement already satisfied: protobuf>=3.9.2 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (3.13.0)\n",
      "Requirement already satisfied: keras-preprocessing<1.2,>=1.1.1 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (1.1.2)\n",
      "Requirement already satisfied: numpy<1.19.0,>=1.16.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (1.17.4)\n",
      "Requirement already satisfied: wheel>=0.26 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (0.35.1)\n",
      "Requirement already satisfied: astunparse==1.6.3 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (1.6.3)\n",
      "Requirement already satisfied: google-pasta>=0.1.8 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (0.2.0)\n",
      "Requirement already satisfied: grpcio>=1.8.6 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (1.33.2)\n",
      "Collecting tensorflow-estimator<2.4.0,>=2.3.0\n",
      "  Downloading tensorflow_estimator-2.3.0-py2.py3-none-any.whl (459 kB)\n",
      "Requirement already satisfied: gast==0.3.3 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorflow) (0.3.3)\n",
      "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (0.4.2)\n",
      "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (1.7.0)\n",
      "Requirement already satisfied: markdown>=2.6.8 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (3.3.3)\n",
      "Requirement already satisfied: setuptools>=41.0.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (50.3.0.post20201006)\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (2.23.0)\n",
      "Requirement already satisfied: werkzeug>=0.11.15 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (1.0.1)\n",
      "Requirement already satisfied: google-auth<2,>=1.6.3 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from tensorboard<3,>=2.3.0->tensorflow) (1.23.0)\n",
      "Requirement already satisfied: requests-oauthlib>=0.7.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<3,>=2.3.0->tensorflow) (1.3.0)\n",
      "Requirement already satisfied: importlib-metadata; python_version < \"3.8\" in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (1.5.0)\n",
      "Requirement already satisfied: idna<3,>=2.5 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (2.8)\n",
      "Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (1.24.1)\n",
      "Requirement already satisfied: chardet<4,>=3.0.2 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (3.0.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard<3,>=2.3.0->tensorflow) (2020.6.20)\n",
      "Requirement already satisfied: cachetools<5.0,>=2.0.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (4.1.1)\n",
      "Requirement already satisfied: pyasn1-modules>=0.2.1 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (0.2.8)\n",
      "Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3.5\" in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (4.6)\n",
      "Requirement already satisfied: oauthlib>=3.0.0 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<3,>=2.3.0->tensorflow) (3.1.0)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from importlib-metadata; python_version < \"3.8\"->markdown>=2.6.8->tensorboard<3,>=2.3.0->tensorflow) (3.0.0)\n",
      "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in c:\\users\\pkapl\\anaconda3\\envs\\newds\\lib\\site-packages (from pyasn1-modules>=0.2.1->google-auth<2,>=1.6.3->tensorboard<3,>=2.3.0->tensorflow) (0.4.8)\n",
      "Installing collected packages: tensorflow-estimator, tensorflow\n",
      "Successfully installed tensorflow-2.3.1 tensorflow-estimator-2.3.0\n"
     ]
    }
   ],
   "source": [
    "!pip install tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'tensorflow'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-28-c9c7a7e21e88>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 4\u001b[1;33m \u001b[1;32mimport\u001b[0m \u001b[0mtensorflow\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mtf\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      5\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mtensorflow\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpython\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mframework\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mops\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'tensorflow'"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow.python.framework import ops\n",
    "\n",
    "%matplotlib inline\n",
    "np.random.seed(1)\n",
    "\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "inp   = onto.select_instances_of(\"a neural-net-input-layer that is-part-of \"+netName)\n",
    "outp  = onto.select_instances_of(\"a neural-net-output-layer that is-part-of \"+netName)\n",
    "frags = onto.select_instances_of(\"a neural-net-fragment that is-part-of \"+netName).sort_values('has-index')\n",
    "init  = onto.select_instances_of(\"a initializer that is-part-of \"+netName)\n",
    "opti  = onto.select_instances_of(\"a optimizer that is-part-of \"+netName)\n",
    "n_x=inp['has-width'][0]\n",
    "n_y=outp['has-number-of-classes'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg height=\"820pt\" viewBox=\"0.00 0.00 826.00 820.00\" width=\"826pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n",
       "<g class=\"graph\" id=\"graph0\" transform=\"scale(1 1) rotate(0) translate(4 816)\">\n",
       "<title>G</title>\n",
       "<polygon fill=\"white\" points=\"-4,4 -4,-816 822,-816 822,4 -4,4\" stroke=\"transparent\"/>\n",
       "<!-- multilayer&#45;neural&#45;net&#45;fragment -->\n",
       "<g class=\"node\" id=\"node1\">\n",
       "<title>multilayer-neural-net-fragment</title>\n",
       "<path d=\"M462,-591.5C462,-591.5 589,-591.5 589,-591.5 595,-591.5 601,-597.5 601,-603.5 601,-603.5 601,-615.5 601,-615.5 601,-621.5 595,-627.5 589,-627.5 589,-627.5 462,-627.5 462,-627.5 456,-627.5 450,-621.5 450,-615.5 450,-615.5 450,-603.5 450,-603.5 450,-597.5 456,-591.5 462,-591.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"525.5\" y=\"-606.7\">multilayer-neural-net-fragment</text>\n",
       "</g>\n",
       "<!-- Ann&#45;1&#45;F&#45;2 -->\n",
       "<g class=\"node\" id=\"node15\">\n",
       "<title>Ann-1-F-2</title>\n",
       "<path d=\"M476,-437.5C476,-437.5 575,-437.5 575,-437.5 581,-437.5 587,-443.5 587,-449.5 587,-449.5 587,-505.5 587,-505.5 587,-511.5 581,-517.5 575,-517.5 575,-517.5 476,-517.5 476,-517.5 470,-517.5 464,-511.5 464,-505.5 464,-505.5 464,-449.5 464,-449.5 464,-443.5 470,-437.5 476,-437.5\" fill=\"whitesmoke\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"525.5\" y=\"-504.7\">Ann-1-F-2</text>\n",
       "<polyline fill=\"none\" points=\"464,-497.5 587,-497.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"502.5\" y=\"-484.7\">has-activation</text>\n",
       "<polyline fill=\"none\" points=\"541,-477.5 541,-497.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"564\" y=\"-484.7\">RELU</text>\n",
       "<polyline fill=\"none\" points=\"464,-477.5 587,-477.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"503\" y=\"-464.7\">has-shape</text>\n",
       "<polyline fill=\"none\" points=\"542,-457.5 542,-477.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"564.5\" y=\"-464.7\">12</text>\n",
       "<polyline fill=\"none\" points=\"464,-457.5 587,-457.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"504\" y=\"-444.7\">has-index</text>\n",
       "<polyline fill=\"none\" points=\"544,-437.5 544,-457.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"565.5\" y=\"-444.7\">2</text>\n",
       "</g>\n",
       "<!-- multilayer&#45;neural&#45;net&#45;fragment&#45;&#45;Ann&#45;1&#45;F&#45;2 -->\n",
       "<g class=\"edge\" id=\"edge13\">\n",
       "<title>multilayer-neural-net-fragment--Ann-1-F-2</title>\n",
       "<path d=\"M525.5,-581.19C525.5,-562.79 525.5,-538.24 525.5,-517.75\" fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"522,-581.24 525.5,-591.24 529,-581.24 522,-581.24\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- Ann&#45;1&#45;F&#45;1 -->\n",
       "<g class=\"node\" id=\"node16\">\n",
       "<title>Ann-1-F-1</title>\n",
       "<path d=\"M457,-0.5C457,-0.5 556,-0.5 556,-0.5 562,-0.5 568,-6.5 568,-12.5 568,-12.5 568,-68.5 568,-68.5 568,-74.5 562,-80.5 556,-80.5 556,-80.5 457,-80.5 457,-80.5 451,-80.5 445,-74.5 445,-68.5 445,-68.5 445,-12.5 445,-12.5 445,-6.5 451,-0.5 457,-0.5\" fill=\"whitesmoke\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"506.5\" y=\"-67.7\">Ann-1-F-1</text>\n",
       "<polyline fill=\"none\" points=\"445,-60.5 568,-60.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"483.5\" y=\"-47.7\">has-activation</text>\n",
       "<polyline fill=\"none\" points=\"522,-40.5 522,-60.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"545\" y=\"-47.7\">RELU</text>\n",
       "<polyline fill=\"none\" points=\"445,-40.5 568,-40.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"484\" y=\"-27.7\">has-shape</text>\n",
       "<polyline fill=\"none\" points=\"523,-20.5 523,-40.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"545.5\" y=\"-27.7\">25</text>\n",
       "<polyline fill=\"none\" points=\"445,-20.5 568,-20.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"485\" y=\"-7.7\">has-index</text>\n",
       "<polyline fill=\"none\" points=\"525,-0.5 525,-20.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"546.5\" y=\"-7.7\">1</text>\n",
       "</g>\n",
       "<!-- multilayer&#45;neural&#45;net&#45;fragment&#45;&#45;Ann&#45;1&#45;F&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge14\">\n",
       "<title>multilayer-neural-net-fragment--Ann-1-F-1</title>\n",
       "<path d=\"M575.31,-586.92C615.54,-565.74 665.5,-529.23 665.5,-478.5 665.5,-478.5 665.5,-478.5 665.5,-148.5 665.5,-99.59 613.07,-71.57 568.43,-56.57\" fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"573.7,-583.81 566.37,-591.46 576.87,-590.05 573.7,-583.81\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;fragment -->\n",
       "<g class=\"node\" id=\"node2\">\n",
       "<title>neural-net-fragment</title>\n",
       "<path d=\"M399.5,-701.5C399.5,-701.5 479.5,-701.5 479.5,-701.5 485.5,-701.5 491.5,-707.5 491.5,-713.5 491.5,-713.5 491.5,-725.5 491.5,-725.5 491.5,-731.5 485.5,-737.5 479.5,-737.5 479.5,-737.5 399.5,-737.5 399.5,-737.5 393.5,-737.5 387.5,-731.5 387.5,-725.5 387.5,-725.5 387.5,-713.5 387.5,-713.5 387.5,-707.5 393.5,-701.5 399.5,-701.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"439.5\" y=\"-716.7\">neural-net-fragment</text>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;fragment&#45;&#45;multilayer&#45;neural&#45;net&#45;fragment -->\n",
       "<g class=\"edge\" id=\"edge1\">\n",
       "<title>neural-net-fragment--multilayer-neural-net-fragment</title>\n",
       "<path d=\"M459.56,-693.3C475.59,-673.18 497.62,-645.51 511.72,-627.81\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"456.81,-691.14 453.32,-701.15 462.28,-695.51 456.81,-691.14\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- basic&#45;neural&#45;net&#45;output&#45;layer -->\n",
       "<g class=\"node\" id=\"node3\">\n",
       "<title>basic-neural-net-output-layer</title>\n",
       "<path d=\"M226,-536.5C226,-536.5 345,-536.5 345,-536.5 351,-536.5 357,-542.5 357,-548.5 357,-548.5 357,-560.5 357,-560.5 357,-566.5 351,-572.5 345,-572.5 345,-572.5 226,-572.5 226,-572.5 220,-572.5 214,-566.5 214,-560.5 214,-560.5 214,-548.5 214,-548.5 214,-542.5 220,-536.5 226,-536.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"285.5\" y=\"-551.7\">basic-neural-net-output-layer</text>\n",
       "</g>\n",
       "<!-- L&#45;Out -->\n",
       "<g class=\"node\" id=\"node14\">\n",
       "<title>L-Out</title>\n",
       "<path d=\"M377.5,-303.5C377.5,-303.5 491.5,-303.5 491.5,-303.5 497.5,-303.5 503.5,-309.5 503.5,-315.5 503.5,-315.5 503.5,-351.5 503.5,-351.5 503.5,-357.5 497.5,-363.5 491.5,-363.5 491.5,-363.5 377.5,-363.5 377.5,-363.5 371.5,-363.5 365.5,-357.5 365.5,-351.5 365.5,-351.5 365.5,-315.5 365.5,-315.5 365.5,-309.5 371.5,-303.5 377.5,-303.5\" fill=\"whitesmoke\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"434.5\" y=\"-350.7\">L-Out</text>\n",
       "<polyline fill=\"none\" points=\"365.5,-343.5 503.5,-343.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"423.5\" y=\"-330.7\">has-number-of-classes</text>\n",
       "<polyline fill=\"none\" points=\"481.5,-323.5 481.5,-343.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"492.5\" y=\"-330.7\">6</text>\n",
       "<polyline fill=\"none\" points=\"365.5,-323.5 503.5,-323.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"409\" y=\"-310.7\">has-index</text>\n",
       "<polyline fill=\"none\" points=\"452.5,-303.5 452.5,-323.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"478\" y=\"-310.7\">3</text>\n",
       "</g>\n",
       "<!-- basic&#45;neural&#45;net&#45;output&#45;layer&#45;&#45;L&#45;Out -->\n",
       "<g class=\"edge\" id=\"edge12\">\n",
       "<title>basic-neural-net-output-layer--L-Out</title>\n",
       "<path d=\"M302.87,-527.97C330.7,-487.07 385.14,-407.06 414.53,-363.85\" fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"299.92,-526.08 297.19,-536.32 305.71,-530.02 299.92,-526.08\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;output&#45;layer -->\n",
       "<g class=\"node\" id=\"node4\">\n",
       "<title>neural-net-output-layer</title>\n",
       "<path d=\"M239,-701.5C239,-701.5 332,-701.5 332,-701.5 338,-701.5 344,-707.5 344,-713.5 344,-713.5 344,-725.5 344,-725.5 344,-731.5 338,-737.5 332,-737.5 332,-737.5 239,-737.5 239,-737.5 233,-737.5 227,-731.5 227,-725.5 227,-725.5 227,-713.5 227,-713.5 227,-707.5 233,-701.5 239,-701.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"285.5\" y=\"-716.7\">neural-net-output-layer</text>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;output&#45;layer&#45;&#45;basic&#45;neural&#45;net&#45;output&#45;layer -->\n",
       "<g class=\"edge\" id=\"edge2\">\n",
       "<title>neural-net-output-layer--basic-neural-net-output-layer</title>\n",
       "<path d=\"M285.5,-691.29C285.5,-657.61 285.5,-601.24 285.5,-572.9\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"282,-691.36 285.5,-701.36 289,-691.36 282,-691.36\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- basic&#45;neural&#45;net&#45;input&#45;layer -->\n",
       "<g class=\"node\" id=\"node5\">\n",
       "<title>basic-neural-net-input-layer</title>\n",
       "<path d=\"M693,-382.5C693,-382.5 806,-382.5 806,-382.5 812,-382.5 818,-388.5 818,-394.5 818,-394.5 818,-406.5 818,-406.5 818,-412.5 812,-418.5 806,-418.5 806,-418.5 693,-418.5 693,-418.5 687,-418.5 681,-412.5 681,-406.5 681,-406.5 681,-394.5 681,-394.5 681,-388.5 687,-382.5 693,-382.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"749.5\" y=\"-397.7\">basic-neural-net-input-layer</text>\n",
       "</g>\n",
       "<!-- L&#45;In -->\n",
       "<g class=\"node\" id=\"node17\">\n",
       "<title>L-In</title>\n",
       "<path d=\"M467.5,-129.5C467.5,-129.5 545.5,-129.5 545.5,-129.5 551.5,-129.5 557.5,-135.5 557.5,-141.5 557.5,-141.5 557.5,-157.5 557.5,-157.5 557.5,-163.5 551.5,-169.5 545.5,-169.5 545.5,-169.5 467.5,-169.5 467.5,-169.5 461.5,-169.5 455.5,-163.5 455.5,-157.5 455.5,-157.5 455.5,-141.5 455.5,-141.5 455.5,-135.5 461.5,-129.5 467.5,-129.5\" fill=\"whitesmoke\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"506.5\" y=\"-156.7\">L-In</text>\n",
       "<polyline fill=\"none\" points=\"455.5,-149.5 557.5,-149.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"485\" y=\"-136.7\">has-width</text>\n",
       "<polyline fill=\"none\" points=\"514.5,-129.5 514.5,-149.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"536\" y=\"-136.7\">12288</text>\n",
       "</g>\n",
       "<!-- basic&#45;neural&#45;net&#45;input&#45;layer&#45;&#45;L&#45;In -->\n",
       "<g class=\"edge\" id=\"edge15\">\n",
       "<title>basic-neural-net-input-layer--L-In</title>\n",
       "<path d=\"M739.87,-372.7C724.63,-333.73 691.45,-261.36 641.5,-218 616.96,-196.7 584.52,-180.2 557.59,-168.84\" fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"736.7,-374.2 743.53,-382.3 743.24,-371.71 736.7,-374.2\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;input&#45;layer -->\n",
       "<g class=\"node\" id=\"node6\">\n",
       "<title>neural-net-input-layer</title>\n",
       "<path d=\"M607,-701.5C607,-701.5 694,-701.5 694,-701.5 700,-701.5 706,-707.5 706,-713.5 706,-713.5 706,-725.5 706,-725.5 706,-731.5 700,-737.5 694,-737.5 694,-737.5 607,-737.5 607,-737.5 601,-737.5 595,-731.5 595,-725.5 595,-725.5 595,-713.5 595,-713.5 595,-707.5 601,-701.5 607,-701.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"650.5\" y=\"-716.7\">neural-net-input-layer</text>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;input&#45;layer&#45;&#45;basic&#45;neural&#45;net&#45;input&#45;layer -->\n",
       "<g class=\"edge\" id=\"edge3\">\n",
       "<title>neural-net-input-layer--basic-neural-net-input-layer</title>\n",
       "<path d=\"M658.84,-691.8C678.6,-628.54 727.83,-470.88 744.15,-418.63\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"655.46,-690.87 655.82,-701.46 662.14,-692.95 655.46,-690.87\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- initializer -->\n",
       "<g class=\"node\" id=\"node7\">\n",
       "<title>initializer</title>\n",
       "<path d=\"M71,-646.5C71,-646.5 102,-646.5 102,-646.5 108,-646.5 114,-652.5 114,-658.5 114,-658.5 114,-670.5 114,-670.5 114,-676.5 108,-682.5 102,-682.5 102,-682.5 71,-682.5 71,-682.5 65,-682.5 59,-676.5 59,-670.5 59,-670.5 59,-658.5 59,-658.5 59,-652.5 65,-646.5 71,-646.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"86.5\" y=\"-661.7\">initializer</text>\n",
       "</g>\n",
       "<!-- Initializer&#45;1 -->\n",
       "<g class=\"node\" id=\"node13\">\n",
       "<title>Initializer-1</title>\n",
       "<path d=\"M12,-129.5C12,-129.5 111,-129.5 111,-129.5 117,-129.5 123,-135.5 123,-141.5 123,-141.5 123,-157.5 123,-157.5 123,-163.5 117,-169.5 111,-169.5 111,-169.5 12,-169.5 12,-169.5 6,-169.5 0,-163.5 0,-157.5 0,-157.5 0,-141.5 0,-141.5 0,-135.5 6,-129.5 12,-129.5\" fill=\"whitesmoke\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"61.5\" y=\"-156.7\">Initializer-1</text>\n",
       "<polyline fill=\"none\" points=\"0,-149.5 123,-149.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"38.5\" y=\"-136.7\">has-character</text>\n",
       "<polyline fill=\"none\" points=\"77,-129.5 77,-149.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"100\" y=\"-136.7\">Xavier</text>\n",
       "</g>\n",
       "<!-- initializer&#45;&#45;Initializer&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge11\">\n",
       "<title>initializer--Initializer-1</title>\n",
       "<path d=\"M63.84,-638.36C47.57,-617.66 28.5,-586.74 28.5,-555.5 28.5,-555.5 28.5,-555.5 28.5,-235.5 28.5,-211.6 39.98,-186.32 49.4,-169.6\" fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"61.3,-640.78 70.34,-646.3 66.72,-636.35 61.3,-640.78\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;part -->\n",
       "<g class=\"node\" id=\"node8\">\n",
       "<title>neural-net-part</title>\n",
       "<path d=\"M256.5,-775.5C256.5,-775.5 314.5,-775.5 314.5,-775.5 320.5,-775.5 326.5,-781.5 326.5,-787.5 326.5,-787.5 326.5,-799.5 326.5,-799.5 326.5,-805.5 320.5,-811.5 314.5,-811.5 314.5,-811.5 256.5,-811.5 256.5,-811.5 250.5,-811.5 244.5,-805.5 244.5,-799.5 244.5,-799.5 244.5,-787.5 244.5,-787.5 244.5,-781.5 250.5,-775.5 256.5,-775.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"285.5\" y=\"-790.7\">neural-net-part</text>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;part&#45;&#45;neural&#45;net&#45;fragment -->\n",
       "<g class=\"edge\" id=\"edge6\">\n",
       "<title>neural-net-part--neural-net-fragment</title>\n",
       "<path d=\"M331.19,-771.14C354.11,-760.42 381.5,-747.62 403,-737.57\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"329.57,-768.03 322,-775.44 332.54,-774.37 329.57,-768.03\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;part&#45;&#45;neural&#45;net&#45;output&#45;layer -->\n",
       "<g class=\"edge\" id=\"edge7\">\n",
       "<title>neural-net-part--neural-net-output-layer</title>\n",
       "<path d=\"M285.5,-765.22C285.5,-756.07 285.5,-746.13 285.5,-737.94\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"282,-765.44 285.5,-775.44 289,-765.44 282,-765.44\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;part&#45;&#45;neural&#45;net&#45;input&#45;layer -->\n",
       "<g class=\"edge\" id=\"edge8\">\n",
       "<title>neural-net-part--neural-net-input-layer</title>\n",
       "<path d=\"M336.72,-782.4C404.82,-768.96 524.71,-745.31 594.93,-731.46\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"335.79,-779.01 326.66,-784.38 337.15,-785.88 335.79,-779.01\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;part&#45;&#45;initializer -->\n",
       "<g class=\"edge\" id=\"edge4\">\n",
       "<title>neural-net-part--initializer</title>\n",
       "<path d=\"M234.38,-781.58C215.01,-776.05 193.36,-768.09 175.5,-757 143.5,-737.13 114.75,-703.3 99.05,-682.81\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"233.69,-785.02 244.26,-784.25 235.52,-778.26 233.69,-785.02\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- optimizer -->\n",
       "<g class=\"node\" id=\"node9\">\n",
       "<title>optimizer</title>\n",
       "<path d=\"M153.5,-536.5C153.5,-536.5 185.5,-536.5 185.5,-536.5 191.5,-536.5 197.5,-542.5 197.5,-548.5 197.5,-548.5 197.5,-560.5 197.5,-560.5 197.5,-566.5 191.5,-572.5 185.5,-572.5 185.5,-572.5 153.5,-572.5 153.5,-572.5 147.5,-572.5 141.5,-566.5 141.5,-560.5 141.5,-560.5 141.5,-548.5 141.5,-548.5 141.5,-542.5 147.5,-536.5 153.5,-536.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"169.5\" y=\"-551.7\">optimizer</text>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;part&#45;&#45;optimizer -->\n",
       "<g class=\"edge\" id=\"edge5\">\n",
       "<title>neural-net-part--optimizer</title>\n",
       "<path d=\"M248.2,-769.45C236.9,-760.83 225.39,-750.15 217.5,-738 182.69,-684.43 173.06,-606.58 170.45,-572.52\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"246.2,-772.32 256.35,-775.35 250.3,-766.65 246.2,-772.32\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- Optimizer&#45;1 -->\n",
       "<g class=\"node\" id=\"node12\">\n",
       "<title>Optimizer-1</title>\n",
       "<path d=\"M321.5,-129.5C321.5,-129.5 425.5,-129.5 425.5,-129.5 431.5,-129.5 437.5,-135.5 437.5,-141.5 437.5,-141.5 437.5,-157.5 437.5,-157.5 437.5,-163.5 431.5,-169.5 425.5,-169.5 425.5,-169.5 321.5,-169.5 321.5,-169.5 315.5,-169.5 309.5,-163.5 309.5,-157.5 309.5,-157.5 309.5,-141.5 309.5,-141.5 309.5,-135.5 315.5,-129.5 321.5,-129.5\" fill=\"whitesmoke\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"373.5\" y=\"-156.7\">Optimizer-1</text>\n",
       "<polyline fill=\"none\" points=\"309.5,-149.5 437.5,-149.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"348\" y=\"-136.7\">has-character</text>\n",
       "<polyline fill=\"none\" points=\"386.5,-129.5 386.5,-149.5 \" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"412\" y=\"-136.7\">ADAM</text>\n",
       "</g>\n",
       "<!-- optimizer&#45;&#45;Optimizer&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge10\">\n",
       "<title>optimizer--Optimizer-1</title>\n",
       "<path d=\"M163.85,-526.52C155.24,-478.88 143.22,-377.84 177.5,-303 207.3,-237.93 280.87,-193.13 328.91,-169.67\" fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"160.41,-527.2 165.72,-536.37 167.29,-525.9 160.41,-527.2\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- basic&#45;neural&#45;net -->\n",
       "<g class=\"node\" id=\"node10\">\n",
       "<title>basic-neural-net</title>\n",
       "<path d=\"M199,-315.5C199,-315.5 262,-315.5 262,-315.5 268,-315.5 274,-321.5 274,-327.5 274,-327.5 274,-339.5 274,-339.5 274,-345.5 268,-351.5 262,-351.5 262,-351.5 199,-351.5 199,-351.5 193,-351.5 187,-345.5 187,-339.5 187,-339.5 187,-327.5 187,-327.5 187,-321.5 193,-315.5 199,-315.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"230.5\" y=\"-330.7\">basic-neural-net</text>\n",
       "</g>\n",
       "<!-- Net&#45;1 -->\n",
       "<g class=\"node\" id=\"node18\">\n",
       "<title>Net-1</title>\n",
       "<path d=\"M298.5,-218.5C298.5,-218.5 328.5,-218.5 328.5,-218.5 334.5,-218.5 340.5,-224.5 340.5,-230.5 340.5,-230.5 340.5,-242.5 340.5,-242.5 340.5,-248.5 334.5,-254.5 328.5,-254.5 328.5,-254.5 298.5,-254.5 298.5,-254.5 292.5,-254.5 286.5,-248.5 286.5,-242.5 286.5,-242.5 286.5,-230.5 286.5,-230.5 286.5,-224.5 292.5,-218.5 298.5,-218.5\" fill=\"whitesmoke\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"313.5\" y=\"-233.7\">Net-1</text>\n",
       "</g>\n",
       "<!-- basic&#45;neural&#45;net&#45;&#45;Net&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge16\">\n",
       "<title>basic-neural-net--Net-1</title>\n",
       "<path d=\"M252.46,-307.37C266.94,-290.79 285.53,-269.51 298.37,-254.81\" fill=\"none\" stroke=\"black\" stroke-dasharray=\"5,2\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"249.67,-305.24 245.72,-315.08 254.94,-309.85 249.67,-305.24\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- neural&#45;net -->\n",
       "<g class=\"node\" id=\"node11\">\n",
       "<title>neural-net</title>\n",
       "<path d=\"M208,-459.5C208,-459.5 245,-459.5 245,-459.5 251,-459.5 257,-465.5 257,-471.5 257,-471.5 257,-483.5 257,-483.5 257,-489.5 251,-495.5 245,-495.5 245,-495.5 208,-495.5 208,-495.5 202,-495.5 196,-489.5 196,-483.5 196,-483.5 196,-471.5 196,-471.5 196,-465.5 202,-459.5 208,-459.5\" fill=\"aliceblue\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"226.5\" y=\"-474.7\">neural-net</text>\n",
       "</g>\n",
       "<!-- neural&#45;net&#45;&#45;basic&#45;neural&#45;net -->\n",
       "<g class=\"edge\" id=\"edge9\">\n",
       "<title>neural-net--basic-neural-net</title>\n",
       "<path d=\"M227.27,-449.18C228.08,-420.39 229.33,-375.92 230.02,-351.69\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"none\" points=\"223.77,-449.28 226.98,-459.37 230.76,-449.47 223.77,-449.28\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "</g>\n",
       "<!-- Optimizer&#45;1&#45;&#45;Net&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge17\">\n",
       "<title>Optimizer-1--Net-1</title>\n",
       "<path d=\"M367.01,-169.78C363.29,-179.36 358.05,-190.81 351.5,-200 348.7,-203.93 345.42,-207.77 341.97,-211.38\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"334.77,-218.43 338.76,-208.22 338.34,-214.93 341.91,-211.43 341.91,-211.43 341.91,-211.43 338.34,-214.93 345.06,-214.65 334.77,-218.43 334.77,-218.43\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"378\" y=\"-191.2\">is-part-of</text>\n",
       "</g>\n",
       "<!-- Initializer&#45;1&#45;&#45;Net&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge18\">\n",
       "<title>Initializer-1--Net-1</title>\n",
       "<path d=\"M79.85,-169.51C91.16,-180.11 106.53,-192.62 122.5,-200 172.53,-223.11 236.51,-231.18 276.24,-234\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"286.29,-234.63 276.03,-238.49 281.3,-234.32 276.31,-234 276.31,-234 276.31,-234 281.3,-234.32 276.59,-229.51 286.29,-234.63 286.29,-234.63\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"143\" y=\"-191.2\">is-part-of</text>\n",
       "</g>\n",
       "<!-- L&#45;Out&#45;&#45;Net&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge19\">\n",
       "<title>L-Out--Net-1</title>\n",
       "<path d=\"M418.4,-303.33C411.48,-292.75 402.65,-281.36 392.5,-273 380.15,-262.82 364.41,-254.97 350.24,-249.27\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"340.74,-245.67 351.68,-245.01 345.41,-247.44 350.09,-249.21 350.09,-249.21 350.09,-249.21 345.41,-247.44 348.49,-253.42 340.74,-245.67 340.74,-245.67\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"424\" y=\"-276.2\">is-part-of</text>\n",
       "</g>\n",
       "<!-- Ann&#45;1&#45;F&#45;2&#45;&#45;L&#45;Out -->\n",
       "<g class=\"edge\" id=\"edge20\">\n",
       "<title>Ann-1-F-2--L-Out</title>\n",
       "<path d=\"M487.22,-437.24C482.31,-431.35 477.58,-425.18 473.5,-419 464.15,-404.84 455.91,-388.09 449.44,-373.24\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"445.45,-363.81 453.49,-371.27 447.4,-368.41 449.35,-373.02 449.35,-373.02 449.35,-373.02 447.4,-368.41 445.2,-374.77 445.45,-363.81 445.45,-363.81\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"499.5\" y=\"-397.7\">connects-to</text>\n",
       "</g>\n",
       "<!-- Ann&#45;1&#45;F&#45;2&#45;&#45;Net&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge21\">\n",
       "<title>Ann-1-F-2--Net-1</title>\n",
       "<path d=\"M533.8,-437.14C539.48,-398.95 541.48,-341.3 512.5,-303 474.63,-252.95 397.4,-240.61 351.07,-237.89\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"340.84,-237.41 351.04,-233.38 345.84,-237.65 350.83,-237.88 350.83,-237.88 350.83,-237.88 345.84,-237.65 350.62,-242.37 340.84,-237.41 340.84,-237.41\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"555\" y=\"-330.7\">is-part-of</text>\n",
       "</g>\n",
       "<!-- Ann&#45;1&#45;F&#45;1&#45;&#45;Ann&#45;1&#45;F&#45;2 -->\n",
       "<g class=\"edge\" id=\"edge22\">\n",
       "<title>Ann-1-F-1--Ann-1-F-2</title>\n",
       "<path d=\"M550.74,-80.77C555.3,-86.48 559.39,-92.61 562.5,-99 588.29,-152.07 592.59,-306.46 579.5,-364 574.44,-386.25 564.4,-409.23 554.34,-428.58\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"549.58,-437.48 550.33,-426.54 551.93,-433.07 554.29,-428.66 554.29,-428.66 554.29,-428.66 551.93,-433.07 558.26,-430.79 549.58,-437.48 549.58,-437.48\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"611.5\" y=\"-233.7\">connects-to</text>\n",
       "</g>\n",
       "<!-- Ann&#45;1&#45;F&#45;1&#45;&#45;Net&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge23\">\n",
       "<title>Ann-1-F-1--Net-1</title>\n",
       "<path d=\"M444.97,-44.22C386.42,-50.48 301.24,-69.93 259.5,-129 240.91,-155.31 264.8,-188.93 286.44,-211.29\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"293.62,-218.41 283.35,-214.57 290.07,-214.89 286.52,-211.37 286.52,-211.37 286.52,-211.37 290.07,-214.89 289.69,-208.18 293.62,-218.41 293.62,-218.41\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"280\" y=\"-146.7\">is-part-of</text>\n",
       "</g>\n",
       "<!-- L&#45;In&#45;&#45;Ann&#45;1&#45;F&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge24\">\n",
       "<title>L-In--Ann-1-F-1</title>\n",
       "<path d=\"M506.5,-129.37C506.5,-118.64 506.5,-104.71 506.5,-91.12\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"506.5,-80.85 511,-90.85 506.5,-85.85 506.5,-90.85 506.5,-90.85 506.5,-90.85 506.5,-85.85 502,-90.85 506.5,-80.85 506.5,-80.85\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"532.5\" y=\"-102.2\">connects-to</text>\n",
       "</g>\n",
       "<!-- L&#45;In&#45;&#45;Net&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge25\">\n",
       "<title>L-In--Net-1</title>\n",
       "<path d=\"M467.76,-169.67C448.31,-179.11 424.31,-190.47 402.5,-200 385.46,-207.45 366.33,-215.16 350.18,-221.48\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"340.56,-225.23 348.25,-217.41 345.22,-223.42 349.88,-221.6 349.88,-221.6 349.88,-221.6 345.22,-223.42 351.51,-225.8 340.56,-225.23 340.56,-225.23\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"448\" y=\"-191.2\">is-part-of</text>\n",
       "</g>\n",
       "<!-- Net&#45;1&#45;&#45;Optimizer&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge26\">\n",
       "<title>Net-1--Optimizer-1</title>\n",
       "<path d=\"M307.98,-218.2C306,-208.7 305.35,-197.05 310.5,-188 313.07,-183.48 316.42,-179.45 320.24,-175.87\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"328.08,-169.52 323.14,-179.31 324.19,-172.66 320.31,-175.81 320.31,-175.81 320.31,-175.81 324.19,-172.66 317.48,-172.31 328.08,-169.52 328.08,-169.52\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"329\" y=\"-191.2\">has-part</text>\n",
       "</g>\n",
       "<!-- Net&#45;1&#45;&#45;Initializer&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge27\">\n",
       "<title>Net-1--Initializer-1</title>\n",
       "<path d=\"M286.19,-235.82C227.59,-235.86 92.75,-232.36 63.5,-200 58.56,-194.54 56.7,-187.19 56.42,-179.83\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"56.9,-169.61 60.92,-179.81 56.66,-174.61 56.43,-179.6 56.43,-179.6 56.43,-179.6 56.66,-174.61 51.93,-179.39 56.9,-169.61 56.9,-169.61\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"82\" y=\"-191.2\">has-part</text>\n",
       "</g>\n",
       "<!-- Net&#45;1&#45;&#45;L&#45;Out -->\n",
       "<g class=\"edge\" id=\"edge28\">\n",
       "<title>Net-1--L-Out</title>\n",
       "<path d=\"M324.8,-254.66C331.73,-264.33 341.23,-276.21 351.5,-285 356.67,-289.42 362.31,-293.65 368.14,-297.63\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"376.78,-303.27 365.95,-301.57 372.6,-300.54 368.41,-297.8 368.41,-297.8 368.41,-297.8 372.6,-300.54 370.87,-294.03 376.78,-303.27 376.78,-303.27\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"370\" y=\"-276.2\">has-part</text>\n",
       "</g>\n",
       "<!-- Net&#45;1&#45;&#45;Ann&#45;1&#45;F&#45;2 -->\n",
       "<g class=\"edge\" id=\"edge29\">\n",
       "<title>Net-1--Ann-1-F-2</title>\n",
       "<path d=\"M309.39,-254.6C304.2,-280.45 298.27,-330.08 319.5,-364 349.43,-411.83 407.25,-440.83 454.03,-457.38\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"463.53,-460.62 452.61,-461.65 458.79,-459.01 454.06,-457.39 454.06,-457.39 454.06,-457.39 458.79,-459.01 455.52,-453.13 463.53,-460.62 463.53,-460.62\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"338\" y=\"-330.7\">has-part</text>\n",
       "</g>\n",
       "<!-- Net&#45;1&#45;&#45;Ann&#45;1&#45;F&#45;1 -->\n",
       "<g class=\"edge\" id=\"edge30\">\n",
       "<title>Net-1--Ann-1-F-1</title>\n",
       "<path d=\"M286.43,-226.44C262.17,-216.7 228.07,-198.65 212.5,-170 203.8,-153.99 202.87,-144.47 212.5,-129 236.19,-90.96 355.8,-65.12 434.97,-51.88\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"444.9,-50.25 435.76,-56.31 439.96,-51.06 435.03,-51.87 435.03,-51.87 435.03,-51.87 439.96,-51.06 434.3,-47.43 444.9,-50.25 444.9,-50.25\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"231\" y=\"-146.7\">has-part</text>\n",
       "</g>\n",
       "<!-- Net&#45;1&#45;&#45;L&#45;In -->\n",
       "<g class=\"edge\" id=\"edge31\">\n",
       "<title>Net-1--L-In</title>\n",
       "<path d=\"M340.6,-235.34C374.27,-233.9 432.19,-227.24 472.5,-200 480.62,-194.51 487.36,-186.38 492.64,-178.29\" fill=\"none\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<polygon fill=\"black\" points=\"497.79,-169.65 496.54,-180.54 495.23,-173.94 492.67,-178.24 492.67,-178.24 492.67,-178.24 495.23,-173.94 488.81,-175.93 497.79,-169.65 497.79,-169.65\" stroke=\"black\" stroke-width=\"0.5\"/>\n",
       "<text font-family=\"Times New Roman,serif\" font-size=\"11.00\" text-anchor=\"middle\" x=\"503\" y=\"-191.2\">has-part</text>\n",
       "</g>\n",
       "</g>\n",
       "</svg>"
      ],
      "text/plain": [
       "<IPython.core.display.SVG object>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "onto.draw_graph()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_placeholders():\n",
    "    X = tf.placeholder(tf.float32,shape=(n_x,None))\n",
    "    Y = tf.placeholder(tf.float32,shape=(n_y,None))\n",
    "    return X, Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X = Tensor(\"Placeholder:0\", shape=(12288, ?), dtype=float32)\n",
      "Y = Tensor(\"Placeholder_1:0\", shape=(6, ?), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "X, Y = create_placeholders()\n",
    "print (\"X = \" + str(X))\n",
    "print (\"Y = \" + str(Y))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_initializer(character):\n",
    "    if character==\"Xavier\":\n",
    "        return tf.contrib.layers.xavier_initializer\n",
    "    elif character==\"Zero\":\n",
    "        return tf.zeros_initializer\n",
    "    raise NotImplementedError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_activation(activation):\n",
    "    if activation==\"RELU\":\n",
    "        return tf.nn.relu\n",
    "    elif activation==\"Sigmoid\":\n",
    "        return tf.nn.sigmoid\n",
    "    elif activation==\"Tanh\":\n",
    "        return tf.nn.tanh\n",
    "    raise NotImplementedError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_optimizer(optimizer):\n",
    "    if optimizer==\"ADAM\":\n",
    "        return tf.train.AdamOptimizer\n",
    "    elif optimizer==\"GradientDescent\":\n",
    "        return tf.train.GradientDescentOptimizer\n",
    "    raise NotImplementedError"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def initialize_parameters():\n",
    "    parameters=[]\n",
    "    activations=[]\n",
    "\n",
    "    W_init = get_initializer(init['has-character'][0])\n",
    "    b_init = tf.zeros_initializer\n",
    "    w=n_x\n",
    "    nfragrows=frags.shape[0]\n",
    "\n",
    "    idx=1\n",
    "    for i in range(0,nfragrows):\n",
    "        shape=[int(x) for x in str.split(frags['has-shape'].values[i],\":\")]\n",
    "        activation = get_activation(frags['has-activation'].values[i])\n",
    "\n",
    "        for lw in shape:\n",
    "            W1 = tf.get_variable(\"W\"+str(idx), [lw,w], initializer = W_init(seed = 1))\n",
    "            b1 = tf.get_variable(\"b\"+str(idx), [lw,1], initializer = b_init())\n",
    "            parameters.append({\"W\":W1,\"b\":b1})\n",
    "            activations.append(activation)\n",
    "            idx=idx+1\n",
    "            w=lw\n",
    "\n",
    "    lw=n_y\n",
    "    W1 = tf.get_variable(\"W\"+str(idx), [lw,w], initializer = W_init(seed = 1))\n",
    "    b1 = tf.get_variable(\"b\"+str(idx), [lw,1], initializer = b_init())\n",
    "    parameters.append({\"W\":W1,\"b\":b1})\n",
    "    activations.append(None)\n",
    "\n",
    "    return parameters, activations    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W = <tf.Variable 'W1:0' shape=(25, 12288) dtype=float32_ref>\n",
      "b = <tf.Variable 'b1:0' shape=(25, 1) dtype=float32_ref>\n",
      "f = <function relu at 0x000001C1844C9A60>\n",
      "W = <tf.Variable 'W2:0' shape=(12, 25) dtype=float32_ref>\n",
      "b = <tf.Variable 'b2:0' shape=(12, 1) dtype=float32_ref>\n",
      "f = <function relu at 0x000001C1844C9A60>\n",
      "W = <tf.Variable 'W3:0' shape=(6, 12) dtype=float32_ref>\n",
      "b = <tf.Variable 'b3:0' shape=(6, 1) dtype=float32_ref>\n",
      "f = None\n"
     ]
    }
   ],
   "source": [
    "tf.reset_default_graph()\n",
    "with tf.Session() as sess:\n",
    "    parameters, activations = initialize_parameters()\n",
    "    for layer in zip(parameters,activations):\n",
    "        print(\"W = \" + str(layer[0][\"W\"]))\n",
    "        print(\"b = \" + str(layer[0][\"b\"]))\n",
    "        print(\"f = \" + str(layer[1]))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def forward_propagation(X,parameters,activations):        \n",
    "    A1 = X\n",
    "    Z1 = None\n",
    "    for layer in zip(parameters,activations):\n",
    "        W1 = layer[0]['W']\n",
    "        b1 = layer[0]['b']\n",
    "        activation = layer[1]\n",
    "        Z1=tf.add(tf.matmul(W1,A1),b1)\n",
    "        if activation!=None :\n",
    "            A1=activation(Z1)\n",
    "\n",
    "    return Z1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Z3 = Tensor(\"Add_2:0\", shape=(6, ?), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    X, Y = create_placeholders()\n",
    "    parameters,activations = initialize_parameters()\n",
    "    Z3 = forward_propagation(X, parameters,activations)\n",
    "    print(\"Z3 = \" + str(Z3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def compute_cost(Z1, Y):\n",
    "    \"\"\"\n",
    "    Computes the cost\n",
    "\n",
    "    Arguments:\n",
    "    Z1 -- output of forward propagation (output of the last LINEAR unit), of shape (6, number of examples)\n",
    "    Y -- \"true\" labels vector placeholder, same shape as Z3\n",
    "\n",
    "    Returns:\n",
    "    cost - Tensor of the cost function\n",
    "    \"\"\"\n",
    "\n",
    "    # to fit the tensorflow requirement for tf.nn.softmax_cross_entropy_with_logits(...,...)\n",
    "    logits = tf.transpose(Z1)\n",
    "    labels = tf.transpose(Y)\n",
    "\n",
    "    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = logits, labels = labels))\n",
    "\n",
    "    return cost    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-29-633496ab49e3>:17: softmax_cross_entropy_with_logits (from tensorflow.python.ops.nn_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "\n",
      "Future major versions of TensorFlow will allow gradients to flow\n",
      "into the labels input on backprop by default.\n",
      "\n",
      "See `tf.nn.softmax_cross_entropy_with_logits_v2`.\n",
      "\n",
      "cost = Tensor(\"Mean:0\", shape=(), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "tf.reset_default_graph()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    X, Y = create_placeholders()\n",
    "    parameters,activations = initialize_parameters()\n",
    "    Z1 = forward_propagation(X, parameters,activations)\n",
    "    cost = compute_cost(Z1, Y)\n",
    "    print(\"cost = \" + str(cost))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def model(X_train, Y_train, X_test, Y_test, learning_rate = 0.0001,\n",
    "      num_epochs = 1500, minibatch_size = 32, print_cost = True):\n",
    "\n",
    "    ops.reset_default_graph()                         # to be able to rerun the model without overwriting tf variables\n",
    "    tf.set_random_seed(1)                             # to keep consistent results\n",
    "    seed = 3                                          # to keep consistent results\n",
    "    (n_x, m) = X_train.shape                          # (n_x: input size, m : number of examples in the train set)\n",
    "    n_y = Y_train.shape[0]                            # n_y : output size\n",
    "    costs = []                                        # To keep track of the cost\n",
    "\n",
    "    X, Y = create_placeholders()\n",
    "\n",
    "    parameters,activations = initialize_parameters()\n",
    "    Z1 = forward_propagation(X,parameters,activations)\n",
    "    cost = compute_cost(Z1,Y)\n",
    "\n",
    "    optimizer =  get_optimizer(opti['has-character'][0])(learning_rate = learning_rate).minimize(cost)\n",
    "\n",
    "    init = tf.global_variables_initializer()\n",
    "\n",
    "    # Start the session to compute the tensorflow graph\n",
    "    with tf.Session() as sess:\n",
    "\n",
    "        # Run the initialization\n",
    "        sess.run(init)\n",
    "\n",
    "        # Do the training loop\n",
    "        for epoch in range(num_epochs):\n",
    "\n",
    "            epoch_cost = 0.                       # Defines a cost related to an epoch\n",
    "            num_minibatches = int(m / minibatch_size) # number of minibatches of size minibatch_size in the train set\n",
    "            seed = seed + 1\n",
    "            minibatches = random_mini_batches(X_train, Y_train, minibatch_size, seed)\n",
    "\n",
    "            for minibatch in minibatches:\n",
    "\n",
    "                # Select a minibatch\n",
    "                (minibatch_X, minibatch_Y) = minibatch\n",
    "\n",
    "                # IMPORTANT: The line that runs the graph on a minibatch.\n",
    "                # Run the session to execute the \"optimizer\" and the \"cost\", the feedict should contain a minibatch for (X,Y).\n",
    "                _ , minibatch_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X, Y: minibatch_Y})\n",
    "\n",
    "                epoch_cost += minibatch_cost / num_minibatches\n",
    "\n",
    "            # Print the cost every epoch\n",
    "            if print_cost == True and epoch % 100 == 0:\n",
    "                print (\"Cost after epoch %i: %f\" % (epoch, epoch_cost))\n",
    "            if print_cost == True and epoch % 5 == 0:\n",
    "                costs.append(epoch_cost)\n",
    "\n",
    "        # plot the cost\n",
    "        plt.plot(np.squeeze(costs))\n",
    "        plt.ylabel('cost')\n",
    "        plt.xlabel('iterations (per tens)')\n",
    "        plt.title(\"Learning rate =\" + str(learning_rate))\n",
    "        plt.show()\n",
    "\n",
    "        # lets save the parameters in a variable\n",
    "        parameters = sess.run(parameters)\n",
    "        print (\"Parameters have been trained!\")\n",
    "\n",
    "        # Calculate the correct predictions\n",
    "        correct_prediction = tf.equal(tf.argmax(Z1), tf.argmax(Y))\n",
    "\n",
    "        # Calculate accuracy on the test set\n",
    "        accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "\n",
    "        print (\"Train Accuracy:\", accuracy.eval({X: X_train, Y: Y_train}))\n",
    "        print (\"Test Accuracy:\", accuracy.eval({X: X_test, Y: Y_test}))\n",
    "\n",
    "        return parameters,activations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "import h5py\n",
    "def load_dataset():\n",
    "    train_dataset = h5py.File('./datasets/train_signs.h5', \"r\")\n",
    "    train_set_x_orig = np.array(train_dataset[\"train_set_x\"][:]) # your train set features\n",
    "    train_set_y_orig = np.array(train_dataset[\"train_set_y\"][:]) # your train set labels\n",
    "\n",
    "    test_dataset = h5py.File('./datasets/test_signs.h5', \"r\")\n",
    "    test_set_x_orig = np.array(test_dataset[\"test_set_x\"][:]) # your test set features\n",
    "    test_set_y_orig = np.array(test_dataset[\"test_set_y\"][:]) # your test set labels\n",
    "\n",
    "    classes = np.array(test_dataset[\"list_classes\"][:]) # the list of classes\n",
    "    \n",
    "    train_set_y_orig = train_set_y_orig.reshape((1, train_set_y_orig.shape[0]))\n",
    "    test_set_y_orig = test_set_y_orig.reshape((1, test_set_y_orig.shape[0]))\n",
    "    \n",
    "    return train_set_x_orig, train_set_y_orig, test_set_x_orig, test_set_y_orig, classes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the dataset\n",
    "X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_dataset()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 5\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of a picture\n",
    "index = 0\n",
    "plt.imshow(X_train_orig[index])\n",
    "print (\"y = \" + str(np.squeeze(Y_train_orig[:, index])))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_to_one_hot(Y, C):\n",
    "    Y = np.eye(C)[Y.reshape(-1)].T\n",
    "    return Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of training examples = 1080\n",
      "number of test examples = 120\n",
      "X_train shape: (12288, 1080)\n",
      "Y_train shape: (6, 1080)\n",
      "X_test shape: (12288, 120)\n",
      "Y_test shape: (6, 120)\n"
     ]
    }
   ],
   "source": [
    "# Flatten the training and test images\n",
    "X_train_flatten = X_train_orig.reshape(X_train_orig.shape[0], -1).T\n",
    "X_test_flatten = X_test_orig.reshape(X_test_orig.shape[0], -1).T\n",
    "# Normalize image vectors\n",
    "X_train = X_train_flatten/255.\n",
    "X_test = X_test_flatten/255.\n",
    "# Convert training and test labels to one hot matrices\n",
    "Y_train = convert_to_one_hot(Y_train_orig, 6)\n",
    "Y_test = convert_to_one_hot(Y_test_orig, 6)\n",
    "\n",
    "print (\"number of training examples = \" + str(X_train.shape[1]))\n",
    "print (\"number of test examples = \" + str(X_test.shape[1]))\n",
    "print (\"X_train shape: \" + str(X_train.shape))\n",
    "print (\"Y_train shape: \" + str(Y_train.shape))\n",
    "print (\"X_test shape: \" + str(X_test.shape))\n",
    "print (\"Y_test shape: \" + str(Y_test.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_mini_batches(X, Y, mini_batch_size = 64, seed = 0):\n",
    "    \"\"\"\n",
    "    Creates a list of random minibatches from (X, Y)\n",
    "\n",
    "    Arguments:\n",
    "    X -- input data, of shape (input size, number of examples)\n",
    "    Y -- true \"label\" vector (containing 0 if cat, 1 if non-cat), of shape (1, number of examples)\n",
    "    mini_batch_size - size of the mini-batches, integer\n",
    "    seed -- this is only for the purpose of grading, so that you're \"random minibatches are the same as ours.\n",
    "\n",
    "    Returns:\n",
    "    mini_batches -- list of synchronous (mini_batch_X, mini_batch_Y)\n",
    "    \"\"\"\n",
    "\n",
    "    m = X.shape[1]                  # number of training examples\n",
    "    mini_batches = []\n",
    "    np.random.seed(seed)\n",
    "\n",
    "    # Step 1: Shuffle (X, Y)\n",
    "    permutation = list(np.random.permutation(m))\n",
    "    shuffled_X = X[:, permutation]\n",
    "    shuffled_Y = Y[:, permutation].reshape((Y.shape[0],m))\n",
    "\n",
    "    # Step 2: Partition (shuffled_X, shuffled_Y). Minus the end case.\n",
    "    num_complete_minibatches = math.floor(m/mini_batch_size) # number of mini batches of size mini_batch_size in your partitionning\n",
    "    for k in range(0, num_complete_minibatches):\n",
    "        mini_batch_X = shuffled_X[:, k * mini_batch_size : k * mini_batch_size + mini_batch_size]\n",
    "        mini_batch_Y = shuffled_Y[:, k * mini_batch_size : k * mini_batch_size + mini_batch_size]\n",
    "        mini_batch = (mini_batch_X, mini_batch_Y)\n",
    "        mini_batches.append(mini_batch)\n",
    "\n",
    "    # Handling the end case (last mini-batch < mini_batch_size)\n",
    "    if m % mini_batch_size != 0:\n",
    "        mini_batch_X = shuffled_X[:, num_complete_minibatches * mini_batch_size : m]\n",
    "        mini_batch_Y = shuffled_Y[:, num_complete_minibatches * mini_batch_size : m]\n",
    "        mini_batch = (mini_batch_X, mini_batch_Y)\n",
    "        mini_batches.append(mini_batch)\n",
    "\n",
    "    return mini_batches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after epoch 0: 1.855702\n",
      "Cost after epoch 100: 1.016458\n",
      "Cost after epoch 200: 0.733102\n",
      "Cost after epoch 300: 0.572939\n",
      "Cost after epoch 400: 0.468774\n",
      "Cost after epoch 500: 0.381015\n",
      "Cost after epoch 600: 0.313829\n",
      "Cost after epoch 700: 0.254169\n",
      "Cost after epoch 800: 0.203800\n",
      "Cost after epoch 900: 0.166474\n",
      "Cost after epoch 1000: 0.141408\n",
      "Cost after epoch 1100: 0.107606\n",
      "Cost after epoch 1200: 0.086730\n",
      "Cost after epoch 1300: 0.061016\n",
      "Cost after epoch 1400: 0.050911\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parameters have been trained!\n",
      "Train Accuracy: 0.9990741\n",
      "Test Accuracy: 0.725\n"
     ]
    }
   ],
   "source": [
    "parameters,activations = model(X_train, Y_train, X_test, Y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prepare_parameters_for_prediction(parameters):        \n",
    "    params=[]\n",
    "    for layer in parameters:\n",
    "        W1 = tf.convert_to_tensor(layer['W'])\n",
    "        b1 = tf.convert_to_tensor(layer['b'])\n",
    "        params.append({\"W\":W1,\"b\":b1})\n",
    "    return params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'W': <tf.Tensor 'Const_2:0' shape=(25, 12288) dtype=float32>,\n",
       "  'b': <tf.Tensor 'Const_3:0' shape=(25, 1) dtype=float32>},\n",
       " {'W': <tf.Tensor 'Const_4:0' shape=(12, 25) dtype=float32>,\n",
       "  'b': <tf.Tensor 'Const_5:0' shape=(12, 1) dtype=float32>},\n",
       " {'W': <tf.Tensor 'Const_6:0' shape=(6, 12) dtype=float32>,\n",
       "  'b': <tf.Tensor 'Const_7:0' shape=(6, 1) dtype=float32>}]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params=prepare_parameters_for_prediction(parameters)\n",
    "params"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(X, params,activations):\n",
    "    \n",
    "    x = tf.placeholder(\"float\", [12288, 1])\n",
    "    \n",
    "    z3 = forward_propagation(x, params, activations)\n",
    "    p = tf.argmax(z3)\n",
    "    \n",
    "    sess = tf.Session()\n",
    "    prediction = sess.run(p, feed_dict = {x: X})\n",
    "        \n",
    "    return prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\pkapl\\Anaconda3\\envs\\ds\\lib\\site-packages\\ipykernel_launcher.py:11: DeprecationWarning: `imread` is deprecated!\n",
      "`imread` is deprecated in SciPy 1.0.0.\n",
      "Use ``matplotlib.pyplot.imread`` instead.\n",
      "  # This is added back by InteractiveShellApp.init_path()\n",
      "C:\\Users\\pkapl\\Anaconda3\\envs\\ds\\lib\\site-packages\\ipykernel_launcher.py:12: DeprecationWarning: `imresize` is deprecated!\n",
      "`imresize` is deprecated in SciPy 1.0.0, and will be removed in 1.3.0.\n",
      "Use Pillow instead: ``numpy.array(Image.fromarray(arr).resize())``.\n",
      "  if sys.path[0] == '':\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your algorithm predicts: y = 3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import scipy\n",
    "from PIL import Image\n",
    "from scipy import ndimage\n",
    "\n",
    "## START CODE HERE ## (PUT YOUR IMAGE NAME) \n",
    "my_image = \"thumbs_up.jpg\"\n",
    "## END CODE HERE ##\n",
    "\n",
    "# We preprocess your image to fit your algorithm.\n",
    "fname = \"./images/\" + my_image\n",
    "image = np.array(ndimage.imread(fname, flatten=False))\n",
    "my_image = scipy.misc.imresize(image, size=(64,64)).reshape((1, 64*64*3)).T\n",
    "my_image_prediction = predict(my_image, params,activations)\n",
    "\n",
    "plt.imshow(image)\n",
    "print(\"Your algorithm predicts: y = \" + str(np.squeeze(my_image_prediction)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
